{"version":3,"sources":["components/Navbar.js","components/Footer.js","components/Button.js","Home.js","About.js","serviceWorker.js","index.js"],"names":["Navbar","src","alt","className","to","React","Component","Footer","href","Button","state","title","clicks","addVal","setState","onClick","this","Home","About","Boolean","window","location","hostname","match","routing","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iQAIqBA,G,4KAEjB,OACE,gCACE,yBAAKC,IAAK,cAAeC,IAAI,gBAC3B,6BACE,4BACE,4BAAI,kBAAC,IAAD,CAAMC,UAAU,OAAOC,GAAG,KAA1B,UAEN,4BACE,4BAAI,kBAAC,IAAD,CAAMD,UAAU,OAAOC,GAAG,UAA1B,iB,GAVkBC,IAAMC,YCArBC,G,6KAEjB,OACI,gCACI,yBAAKJ,UAAU,UACX,uBAAGA,UAAU,OAAb,8BACA,uBAAGK,KAAK,iCAAiCL,UAAU,sBAAnD,KACA,uBAAGK,KAAK,oCAAoCL,UAAU,uBAAtD,KACA,uBAAGK,KAAK,yCAAyCL,UAAU,sBAA3D,KACA,uBAAGK,KAAK,4BAA4BL,UAAU,wBAA9C,W,GAToBE,IAAMC,YCDrBG,E,4MAEjBC,MAAQ,CACJC,MAAO,WACPC,OAAQ,G,EAGZC,OAAS,WACL,EAAKC,SAAS,CAAEF,OAAQ,EAAKF,MAAME,OAAS,IAC5C,EAAKE,SAAS,CAACH,MAAO,WAAa,EAAKD,MAAME,U,uDAKlD,OACE,6BACI,4BAAQT,UAAU,SAASY,QAASC,KAAKH,QAASG,KAAKN,MAAMC,Y,GAhBnCN,IAAMC,WCkB3BW,E,uKAbX,OACE,6BACE,kBAAC,EAAD,MACA,yBAAKd,UAAU,UACb,wDACA,kBAAC,EAAD,OAEF,kBAAC,EAAD,W,GATWE,IAAMC,WCSVY,E,uKATX,OACE,6BACE,kBAAC,EAAD,MACA,uBAAGf,UAAU,UAAb,mC,GALYE,IAAMC,W,MCQNa,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCTR,IAAMC,EACJ,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWV,IACjC,kBAAC,IAAD,CAAOQ,OAAK,EAACC,KAAK,SAASC,UAAWT,MAM5CU,IAASC,OACLL,EACAM,SAASC,eAAe,SD8GtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACnBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.22ea5121.chunk.js","sourcesContent":["import React from 'react';\nimport {Link} from 'react-router-dom';\nimport '../App.css';\n\nexport default class Navbar extends React.Component {\n  render() {\n    return (\n      <header>\n        <img src={'../logo.svg'} alt=\"shane-games\"></img>\n          <nav>\n            <ul>\n              <li><Link className=\"link\" to=\"/\">Home</Link></li>\n            </ul>\n            <ul>\n              <li><Link className=\"link\" to=\"about/\">About</Link></li>\n            </ul>\n          </nav>\n      </header>\n    );\n  }\n}\n","import React from 'react';\nimport '../App.css';\nimport 'font-awesome/css/font-awesome.min.css'; \n\nexport default class Footer extends React.Component {\n  render() {\n    return (\n        <footer>\n            <div className=\"footer\">\n                <p className=\"cpr\">© 2019-2020 Shane-Games</p>\n                <a href=\"https://github.com/shane-games\" className=\"fa fa-github fa-2x\"> </a>\n                <a href=\"https://twitter.com/ShaneGamesDev\" className=\"fa fa-twitter fa-2x\"> </a>\n                <a href=\"https://www.reddit.com/user/shanepaton\" className=\"fa fa-reddit fa-2x\"> </a>\n                <a href=\"mailto:spaton08@gmail.com\" className=\"fa fa-envelope fa-2x\"> </a>\n            </div>\n        </footer>\n    );\n  }\n}\n","import React from 'react';\nimport '../App.css';\n\nexport default class Button extends React.Component {\n        \n    state = {\n        title: \"Click Me\",\n        clicks: 1\n    };\n    \n    addVal = () => {\n        this.setState({ clicks: this.state.clicks + 1, })\n        this.setState({title: \"Clicked \" + this.state.clicks})\n    }\n  \n    render() {\n\n    return (\n      <div>\n          <button className=\"button\" onClick={this.addVal}>{this.state.title}</button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport Navbar from './components/Navbar';\nimport Footer from './components/Footer';\nimport Button from './components/Button';\nimport './App.css';\n\nclass Home extends React.Component {\n  render() {\n    return (\n      <div>\n        <Navbar/>\n        <div className=\"center\">\n          <h1>Programer, Designer, Kid</h1>\n          <Button/>\n        </div>\n        <Footer/>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React from 'react';\nimport Navbar from './components/Navbar';\nimport './App.css';\n\nclass About extends React.Component {\n  render() {\n    return (\n      <div>\n        <Navbar/>\n        <p className=\"footer\">© 2019-2020 Shane-Games</p>\n      </div>\n    );\n  }\n}\n\nexport default About;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n              'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n      .register(swUrl)\n      .then((registration) => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n                console.log(\n                    'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                );\n\n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n\n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch((error) => {\n        console.error('Error during service worker registration:', error);\n      });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'},\n  })\n      .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n        // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n        // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n            'No internet connection found. App is running in offline mode.',\n        );\n      });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n        .then((registration) => {\n          registration.unregister();\n        })\n        .catch((error) => {\n          console.error(error.message);\n        });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Route, BrowserRouter as Router} from 'react-router-dom';\nimport Home from './Home';\nimport About from './About';\nimport './index.css';\nimport './App.css';\nimport * as serviceWorker from './serviceWorker';\n\nconst routing = (\n  <Router>\n    <div>\n      <Route exact path=\"/\" component={Home} />\n      <Route exact path=\"/about\" component={About} />\n    </div>\n  </Router>\n);\n\n\nReactDOM.render(\n    routing,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}